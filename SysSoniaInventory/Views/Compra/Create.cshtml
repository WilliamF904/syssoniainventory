@model SysSoniaInventory.Models.ModelCompra

@{
    ViewData["Title"] = "Create";
}




<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="~/assets/vendors/mdi/css/materialdesignicons.min.css">
<link rel="stylesheet" href="~/assets/vendors/css/vendor.bundle.base.css">
<!-- endinject -->
<!-- Plugin css for this page -->
<link rel="stylesheet" href="~/assets/vendors/jvectormap/jquery-jvectormap.css">
<link rel="stylesheet" href="~/assets/vendors/flag-icon-css/css/flag-icon.min.css">
<link rel="stylesheet" href="~/assets/vendors/owl-carousel-2/owl.carousel.min.css">
<link rel="stylesheet" href="~/assets/vendors/owl-carousel-2/owl.theme.default.min.css">

<link rel="stylesheet" href="~/vendor/fontawesome-free/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css">
<!-- End plugin css for this page -->
<!-- inject:css -->
<!-- endinject -->
<!-- Layout styles -->
<link rel="stylesheet" href="~/assets/css/style.css">

<div class="container-fluid">
    <form asp-action="Create" method="post">
        <input type="hidden" asp-for="NameSucursal" id="NameSucursal" value="@ViewBag.NameSucursal" />

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <!-- Columna izquierda -->
            <div class="col-md-4 stretch-card">
                <div class="card dropdown-container">
                    <div class="card-body">
                        <h1 class="display-5 font-weight-bold">Registrar Compra</h1>
                        <hr class="linea-blanca" />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Date" class="h5 font-weight-bold">Fecha:</label>
                                    <input asp-for="Date" class="form-control font-weight-bold form-control-lg readonly-input" id="Date" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Time" class="h5 font-weight-bold">Hora:</label>
                                    <input asp-for="Time" class="form-control font-weight-bold form-control-lg readonly-input" id="Time" type="time" value="@DateTime.Now.ToString("HH:mm")" readonly />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="NameUser" class="h5 font-weight-bold">Usuario:</label>
                            <input asp-for="NameUser" class="form-control font-weight-bold form-control-lg readonly-input" id="NameUser" value="@ViewBag.NameUser" readonly />
                        </div>


                        <div class="mb-3">
                            <label for="NameProveedor" class="form-label">Proveedor:</label>
                            <select id="NameProveedor" name="NameProveedor" class="form-control">
                                <option value="" disabled selected>Seleccione un proveedor</option>
                                @foreach (var proveedor in ViewBag.IdProveedor)
                                {
                                    <option value="@proveedor.Value">@proveedor.Text</option>
                                }
                            </select>
                        </div>

                       
                        <div class="form-group">
                            <label for="CodigoFactura" class="h5 font-weight-bold">Codigo de factura de compra:</label>
                            <input asp-for="CodigoFactura" class="form-control" />
                            <span asp-validation-for="CodigoFactura" class="text-danger"></span>
                        </div>
                      
                        <div class="form-group">
                            <label for="Description" class="h5 font-weight-bold">Descripción (Opcional):</label>
                            <input asp-for="Description" class="form-control" />
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <!-- Contenedor oculto para los inputs dinámicos -->
                        <div id="HiddenInputsContainer"></div>

                        <hr class="linea-blanca" />
                        <button type="submit" class="btn btn-outline-primary ">Guardar</button>
                        <a asp-action="Index" class="btn btn-outline-danger ">Cancelar</a>
                    </div>
                </div>
            </div>

            <!-- Columna derecha -->
            <div class="col-md-8   stretch-card">
                <div class="card dropdown-container">
                    <div class="card-body">
                        <h4 class="font-weight-bold">Productos Disponibles:</h4>
                        <div class="form-group">
                            <select id="ProductSelect" class="form-control font-weight-bold form-control-lg text-light">
                                <option value="" disabled selected>Seleccione un producto</option>
                                @foreach (var product in ViewBag.Productos)

                                {
                                    <option value="@product.Id" data-name="@product.Name" data-price="@product.PurchasePrice" data-stock="@product.Stock" data-codigo="@product.Codigo" data-marca="@product.IdMarcanavigation?.Name">
                                        @product.Name - Precio: $@product.PurchasePrice - @product.Codigo
                                    </option>
                                }
                            </select>
                            <hr class="linea-blanca" />
                        </div>
                        <div class="table-responsive">
                            <table class="table table-bordered  table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Producto</th>
                                        <th>Unid.</th>
                                        <th>Precio Unid.</th>
                                        <th>Subtotal</th>
                                        <th>Actu.</th>
                                        <th>Accion</th>
                                    </tr>
                                </thead>

                                <tbody id="ProductTableBody"  class="txt-whithe">
                                    <!-- Filas dinámicas -->
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="4" class="text-right font-weight-bold txt-whithe">Total General:</td>
                                        <td colspan="2" id="TotalGeneral" class=" txt-whithe">$0.00</td>
                                    </tr>
                                </tfoot>
                            </table>

                        </div>

                    </div>

                  
                  
                </div>
            </div>

        </div>
    

    </form>
</div>


<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-primary text-white rounded-top">
                <h5 class="modal-title" id="productModalLabel">Añadir Producto</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <div class="mb-3">
                        <label class="form-label" id="productDetails" style="font-weight: bold;"></label>
                    </div>
                    <div class="mb-3">
                        <label for="quantityInput" class="form-label">Cantidad:</label>
                        <input type="number" class="form-control" id="quantityInput" placeholder="Ingrese cantidad" required>
                        <div class="form-text">Stock actual: <span id="maxStock" class="text-muted"></span></div>
                    </div>
                    <div class="mb-3">
                        <label for="purchasePriceInput" class="form-label">Precio de Compra:</label>
                        <input type="number" class="form-control" id="purchasePriceInput" placeholder="Ingrese precio de compra" required>
                    </div>
                    <!-- Opción de actualizar precio -->
                    <div class="mb-3">
                        <label for="updatePriceSelect" class="form-label">Actualizar precio:</label>
                        <select class="form-select" id="updatePriceSelect" required>
                            <option value="false" class="text-danger">No actualizar precio</option>
                            <option value="true" class="text-success">Actualizar precio</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" id="cancelProductBtn">
                    <i class="mdi mdi-close"></i> Cancelar
                </button>
                <button type="button" class="btn btn-outline-primary rounded-pill px-4" id="saveProductBtn">
                    <i class="mdi mdi-content-save"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</div>




<script>
    document.addEventListener('DOMContentLoaded', function () {
        const productsSelect = document.getElementById('ProductSelect');
        const productTableBody = document.getElementById('ProductTableBody');
        const totalGeneral = document.getElementById('TotalGeneral');
        const hiddenInputsContainer = document.getElementById('HiddenInputsContainer');
        let products = [];

        const productModal = new bootstrap.Modal(document.getElementById('productModal'));
        const quantityInput = document.getElementById('quantityInput');
        const purchasePriceInput = document.getElementById('purchasePriceInput');
        const maxStockSpan = document.getElementById('maxStock');
        const saveProductBtn = document.getElementById('saveProductBtn');
        let currentProduct = null;

        function resetSelect() {
            productsSelect.selectedIndex = 0;
        }

        function updateHiddenInputs() {
            hiddenInputsContainer.innerHTML = '';
            products.forEach((product, index) => {
                const baseName = `detalles[${index}]`;
                hiddenInputsContainer.innerHTML += `
                        <input type="hidden" name="${baseName}.IdProduct" value="${product.id}" />
                        <input type="hidden" name="${baseName}.CodigoProducto" value="${product.codigo}" />
                        <input type="hidden" name="${baseName}.CantidadProduct" value="${product.quantity}" />
                        <input type="hidden" name="${baseName}.PriceCompraUnitario" value="${product.price}" />
                        <input type="hidden" name="${baseName}.PriceTotal" value="${product.subtotal}" />
                        <input type="hidden" name="${baseName}.NameProducto" value="${product.name}" />
                        <input type="hidden" name="${baseName}.UpdatePrice" value="${product.updatePrice}" />
                    `;
            });
        }

        function updateTotal() {
            const total = products.reduce((sum, product) => sum + product.subtotal, 0);
            totalGeneral.textContent = `$${total.toFixed(2)}`;
        }

        const productDetails = document.getElementById('productDetails');

        productsSelect.addEventListener('change', function () {
            const selectedOption = productsSelect.options[productsSelect.selectedIndex];
            const productId = selectedOption.value;
            const productName = selectedOption.getAttribute('data-name');
            const productPrice = parseFloat(selectedOption.getAttribute('data-price'));
            const productStock = parseInt(selectedOption.getAttribute('data-stock'));
            const productCodigo = selectedOption.getAttribute('data-codigo');
            const productMarca = selectedOption.getAttribute('data-marca');

            if (products.some(p => p.id === productId)) {
                alert("Este producto ya está agregado.");
                resetSelect();
                return;
            }

            currentProduct = {
                id: productId,
                name: productName,
                price: productPrice,
                stock: productStock,
                codigo: productCodigo,
                marca: productMarca
            };

            productDetails.textContent = `${currentProduct.name} (Código: ${currentProduct.codigo}) - Marca: ${currentProduct.marca}`;
            maxStockSpan.textContent = productStock;
            quantityInput.value = 1;
            purchasePriceInput.value = productPrice;
            productModal.show();
        });

               // Acción del botón "Cancelar"
    cancelProductBtn.addEventListener('click', function () {
            resetSelect();
        productsSelect.selectedIndex = 0; // Restablecer selección
        productModal.hide();
    });

        saveProductBtn.addEventListener('click', function () {
            const quantity = parseInt(quantityInput.value, 10);
            const purchasePrice = parseFloat(purchasePriceInput.value);
             const updatePrice = document.getElementById('updatePriceSelect').value === 'true';

            if (isNaN(quantity) || quantity <= 0 || quantity > currentProduct.stock) {
                alert("Cantidad inválida. Verifique los límites.");
                return;
            }

            if (isNaN(purchasePrice) || purchasePrice <= 0) {
                alert("Precio de compra inválido.");
                return;
            }

            const subtotal = purchasePrice * quantity;

            const product = {
                id: currentProduct.id,
                codigo: currentProduct.codigo,
                name: currentProduct.name,
                quantity,
                price: purchasePrice,
                subtotal,
                updatePrice
            };
            products.push(product);

            const row = document.createElement('tr');
            row.innerHTML = `
                    <td class="txt-whithe" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 150px;" title="${product.name}">${product.name}</td>
                        <td class="txt-whithe">${quantity}</td>
                        <td class="txt-whithe">$${purchasePrice.toFixed(2)}</td>
                        <td class="txt-whithe">$${subtotal.toFixed(2)}</td>
                             <td>
            ${updatePrice ? '<span class="text-success">Sí</span>' : '<span class="text-danger">No</span>'}
        </td>
                    <td>
                        <button class="btn btn-danger btn-sm" onclick="removeProduct('${product.id}', this)"> X </button>
                    </td>
                `;
            productTableBody.appendChild(row);

            updateHiddenInputs(); // Actualizar los campos ocultos
            updateTotal(); // Actualizar total
            resetSelect();
            productModal.hide();
        });

        window.removeProduct = function (productId, button) {
            products = products.filter(p => p.id !== productId);
            button.parentElement.parentElement.remove();
            updateHiddenInputs();
            updateTotal();
        };
    });
</script>