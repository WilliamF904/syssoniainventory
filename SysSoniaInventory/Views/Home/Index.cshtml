@model List<SysSoniaInventory.ViewModels.FacturaViewModel>

@{
    // Obtener los claims del usuario autenticado

    var role = User.FindFirstValue(ClaimTypes.Role); // Nombre del rol

    var accessType = User.FindFirstValue("AccessTipe"); // Tipo de acceso
}




<div class="row">
    <!-- Gráfico de pastel + Información del Usuario Autenticado -->
    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <h3 class="card-title"><strong>Usuario:</strong> @ViewBag.UserName</h3>
                        <div style="display: flex; flex-wrap: wrap; gap: 1rem; align-items: center;">
                            <p style="font-size: 1rem; line-height: .4em; margin: 0;">
                                Rol: @role
                            </p>
                            <p style="font-size: 1rem; line-height: .4em; margin: 0;">
                                Tipo de acceso: @accessType
                            </p>
                            <p style="font-size: 1rem; line-height: .4em; margin: 0;">
                                <strong>Total de Ventas: @ViewBag.TotalVentasUsuario.ToString("C")</strong>
                            </p>
                        </div>

                        <br />

                    </div>
                </div>

                <div class="col-12">
                    <canvas id="pieChart"></canvas>
                </div>

            </div>
        </div>
    </div>

    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Reportes de Mensaje o Recordatorio</h4>

                <div class="table-responsive">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Descripción</th>
                               
                                <th>Estatus</th>
                            </tr>
                        </thead>
                        <tbody class="txt-whithe">
                            @if (ViewBag.ReportesMensaje != null)
                            {
                                int index = 1;
                                foreach (var reporte in ViewBag.ReportesMensaje)
                                {
                                    <tr>
                                        <td>@index</td>
                                        <td>  @(reporte.Description.Length > 30 ? reporte.Description.Substring(0, 30) + "..." : reporte.Description)</td>
                                       
                                        <td>
                                            <a href="@Url.Action("Edit", "Report", new { id = reporte.Id })"
                                               class="btn badge
                                           @(reporte.Estatus == "Pendiente" ? "badge-outline-danger" :
                                             reporte.Estatus == "En Proceso" ? "badge-outline-warning" :
                                             "badge-outline-success")">
                                                @(reporte.Estatus == "Pendiente" ? "Pendiente" :
                                                    reporte.Estatus == "En Proceso" ? "En progreso" :
                                                    "Finalizado")
                                            </a>
                                        </td>
                                    </tr>
                                    index++;
                                }
                            }
                        </tbody>
                    </table>
                </div>

                @if (ViewBag.MostrarBotonVerTodos != null && ViewBag.MostrarBotonVerTodos)
                {
                    <a href="@Url.Action("Index", "Report")" class="btn btn-primary">Ver todos los reportes</a>
                }
            </div>
        </div>
    </div>

    @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
    {
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Reportes Pendientes</h4>

                    <div class="table-responsive">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Tipo</th>
                                    <th>Fecha Inicio</th>
                                    <th>Estatus</th>
                                </tr>
                            </thead>
                            <tbody class="txt-whithe">
                                @if (ViewBag.Reportes != null)
                                {
                                    int index = 1;
                                    foreach (var reporte in ViewBag.Reportes)
                                    {
                                        <tr>
                                            <td>@index</td>
                                            <td>@reporte.TypeReport</td>
                                            <td>@reporte.StarDate.ToShortDateString()</td>
                                            <td>
                                                <a href="@Url.Action("Edit", "Report", new { id = reporte.Id })"
                                                   class="btn badge
           @(reporte.Estatus == "Pendiente" ? "badge-outline-danger" :
             reporte.Estatus == "En Proceso" ? "badge-outline-warning" :
             "badge-outline-success")">
                                                    @(reporte.Estatus == "Pendiente" ? "Pendiente" :
                                                        reporte.Estatus == "En Proceso" ? "En progreso" :
                                                        "Finalizado")
                                                </a>
                                            </td>

                                        </tr>
                                        index++;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (ViewBag.MostrarBotonVerTodos != null && ViewBag.MostrarBotonVerTodos)
                    {
                        <a href="@Url.Action("Index", "Report")" class="btn btn-primary">Ver todos los reportes</a>
                    }
                </div>
            </div>
        </div>

    }


    <!-- Gráfico de barras + Tabla de Ventas por Usuario -->
    @if (ViewBag.ProductosGrafico != null && ViewBag.ProductosGrafico.Count > 0)



    {
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Gráfico de Ventas del Mes (Top 10 Productos)</h4>
                    <canvas id="barChart" style="height: 286px; display: block; width: 573px;" width="1146" height="572" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
        </div>

        <!-- Tabla de Ventas por Usuario -->
        <div class="col-lg-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Ventas Totales por Usuario del Mes</h4>

                    <div class="table-responsive">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>#</th> <!-- Nueva columna para el índice -->
                                    <th>Usuario</th>
                                    <th>Total cantidad</th>
                                    <th>Total Ventas</th>
                                </tr>
                            </thead>
                            <tbody class="txt-whithe">
                                @if (ViewBag.VentasPorUsuario != null)
                                {
                                    int index = 1;
                                    <!-- Contador para el índice -->
                                    foreach (var usuario in ViewBag.VentasPorUsuario)
                                    {
                                        <tr>
                                            <td>@index</td> <!-- Mostrar índice -->
                                            <td>@usuario.NameUser</td>
                                            <td>@usuario.TotalProducts</td>
                                            <td>@usuario.TotalFacturas.ToString("C")</td>
                                        </tr>
                                        index++;
                                        <!-- Incrementar índice -->
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav>
                        <ul class="pagination">
                            @for (int i = 1; i <= ViewBag.TotalPages; i++)
                            {
                                <li class="page-item @(i == ViewBag.Page ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>


    }

</div>

<script src="~/js/chart.js"></script>

<script src="~/js/jquery.js"></script>
<script>
    $(function () {
        'use strict';

        // Pie Chart - Productos Vendidos por Usuario
        const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ProductosVendidosUsuario)) || [];

        let pieData = {
            datasets: [{
                data: productos.map(p => p.CantidadVendida),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(255, 206, 86, 0.5)',
                    'rgba(75, 192, 192, 0.5)',
                    'rgba(153, 102, 255, 0.5)',
                    'rgba(255, 159, 64, 0.5)',
                    'rgba(201, 203, 207, 0.5)',
                    'rgba(123, 239, 178, 0.5)',
                    'rgba(244, 91, 105, 0.5)',
                    'rgba(127, 127, 127, 0.5)'
                ], borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(201, 203, 207, 1)',
                    'rgba(123, 239, 178, 1)',
                    'rgba(244, 91, 105, 1)',
                    'rgba(127, 127, 127, 1)'
                ],
            }],
            labels: productos.map(p => p.NameProduct || "Sin nombre")
        };

        var doughnutPieOptions = {
            responsive: true,
            animation: {
                animateScale: true,
                animateRotate: true
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        const index = tooltipItem.index;
                        const producto = productos[index];
                        return `Código: ${producto.CodigoProducto || "Sin código"} | Ventas: ${producto.CantidadVendida || 0}`;
                    }
                }
            },
            legend: {
                labels: {
                    fontColor: 'white', // Cambia el color de las etiquetas en la leyenda
                }
            },
            plugins: {
                datalabels: {
                    color: 'white', // Cambia el color del texto mostrado en la gráfica
                    formatter: function (value, context) {
                        const index = context.dataIndex;
                        const producto = productos[index];
                        return producto.NameProduct || "Sin nombre"; // Etiqueta personalizada
                    }
                }
            }
        };

        // Bar Chart - Gráfico de Ventas del Mes (Solo para Niveles 3, 4, 5)
        const productosGrafico = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ProductosGrafico)) || [];

        let barData = {
            labels: productosGrafico.map(p => p.NameProduct || "Sin nombre"),
            datasets: [{
                label: '# de Ventas',
                data: productosGrafico.map(p => p.CantidadVendida),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(201, 203, 207, 0.2)',
                    'rgba(123, 239, 178, 0.2)',
                    'rgba(244, 91, 105, 0.2)',
                    'rgba(127, 127, 127, 0.2)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(201, 203, 207, 1)',
                    'rgba(123, 239, 178, 1)',
                    'rgba(244, 91, 105, 1)',
                    'rgba(127, 127, 127, 1)'
                ],
                borderWidth: 1,
                fill: false
            }]
        };

        var barOptions = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        fontColor: 'white' // Cambiar color del texto del eje Y
                    },
                    gridLines: {
                        color: "rgba(204, 204, 204,0.1)"
                    }
                }],
                xAxes: [{
                    ticks: {
                        fontColor: 'white' // Cambiar color del texto del eje X
                    },
                    gridLines: {
                        color: "rgba(204, 204, 204,0.1)"
                    }
                }]
            },
            legend: {
                display: false,
                labels: {
                    fontColor: 'white' // Cambiar color de las etiquetas de la leyenda (si se muestra)
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        const index = tooltipItem.index;
                        const producto = productosGrafico[index];
                        return `Código: ${producto.CodigoProducto || "Sin código"} | Ventas: ${producto.CantidadVendida || 0}`;
                    }
                }
            }
        };



        if ($("#barChart").length) {
            var barChartCanvas = $("#barChart").get(0).getContext("2d");
            var barChart = new Chart(barChartCanvas, {
                type: 'bar',
                data: barData,
                options: barOptions
            });
        }

        if ($("#pieChart").length) {
            var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
            var pieChart = new Chart(pieChartCanvas, {
                type: 'pie',
                data: pieData,
                options: doughnutPieOptions
            });
        }
    });
</script>

