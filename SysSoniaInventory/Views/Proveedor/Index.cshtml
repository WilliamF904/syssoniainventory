@model IEnumerable<SysSoniaInventory.Models.ModelProveedor>

@{
    ViewData["Title"] = "Index";
}


<div class="row">


    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h1 class="card-title">Lista de Proveedores</h1>
                <div class="d-flex align-items-center justify-content-start">
                    @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                    {
                        <!-- Botón Nuevo Usuario -->
                        <a asp-action="Create" class="btn btn-outline-primary font-weight-bold ml-2">
                            <i class="fas fa-plus"></i> Nuevo proveedor
                        </a>


                        <!-- Línea decorativa -->
                        <div class="separator mx-3"></div>
                    }
                    @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                    {
                        <!-- Contenedor del Botón Descargar PDF -->
                        <div class="dropdown-container">
                            <!-- Botón principal para abrir el menú -->
                            <button id="dropdownButton" class="dropdown-button btn btn-outline-secondary">
                                <i class="mdi mdi-download"></i> Descargar PDF
                            </button>

                            <!-- Menú desplegable -->
                            <ul id="dropdownMenu" class="dropdown-menu">
                                <li>

                                    <a asp-action="GeneratePdf" asp-controller="GeneratePdfProveedores" class="btn btn-primary">
                                        <i class="mdi mdi-download"></i> Descargar Todos los Proveedores
                                    </a>

                                </li>
                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>


    <!-- Filtrado de Proveedores -->
    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h1 class="card-title">Filtrado de Proveedores</h1>
                <form>
                    <div class="form-group d-flex align-items-center">
                        <input type="text" id="filterText" class="form-control" placeholder="Filtrar por nombre, descripción, email, etc." style="width: auto;">
                    </div>
                                     
                </form>
            </div>
        </div>
    </div>

    <!-- Tabla de Proveedores -->
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-striped" id="providerTable">
                        <thead>
                            <tr>
                                <th>
                                   Nombre
                                </th>
                                <th>
                                   Descripción
                                </th>
                                <th>
                                   Tel
                                </th>
                                <th>
                                    Email
                                </th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody class="txt-whithe">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                 
                                    <td>
                                        @(item.Description?.ToString().Substring(0, Math.Min(item.Description.ToString().Length, 25)) ?? "")
                                    </td>


                                    <td>@Html.DisplayFor(modelItem => item.Tel)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                    <td>
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning">Editar</a>
                                        }
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info">Detalles</a>
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                                        }
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="ProductosPorProveedor" asp-route-id="@item.Id" class="btn btn-outline-success">Relacionados</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div id="paginationControls" class="mt-3"></div>
            </div>
        </div>
    </div>

    </div>

<!-- Scripts y estilos heredados -->
<style>
    .form-group label {
        width: 150px;
        text-align: right;
    }

    .form-group input,
    .form-group select {
        flex-grow: 1;
    }

    .d-flex {
        display: flex;
    }

    .separator {
        width: 2px;
        height: 30px;
        background-color: #ddd;
    }

    .dropdown-container {
        position: relative;
    }

        .dropdown-container .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            display: none;
            list-style: none;
            padding: 10px;
            margin: 0;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            width: 250px;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
            z-index: 1000;
        }

            .dropdown-container .dropdown-menu.show {
                display: block;
                opacity: 1;
                transform: translateY(0);
            }
</style>

    <script>
               document.addEventListener('DOMContentLoaded', function () {
            const filterText = document.getElementById('filterText');
            const providerTable = document.getElementById('providerTable');
            const rows = Array.from(providerTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr'));
            const paginationControls = document.getElementById('paginationControls');
            const rowsPerPage = 6;
            let currentPage = 1;
            let filteredRows = rows;

            // Filtrar filas
            function filterTable() {
                const filterValue = filterText.value.toLowerCase();

                filteredRows = rows.filter(row => {
                    const cells = Array.from(row.getElementsByTagName('td'));
                    return cells.some(cell => cell.textContent.toLowerCase().includes(filterValue));
                });

                currentPage = 1;
                displayRows();
                setupPagination();
            }

            // Mostrar filas paginadas
            function displayRows() {
                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                rows.forEach(row => (row.style.display = 'none'));
                filteredRows.slice(start, end).forEach(row => (row.style.display = ''));
            }

            // Configurar controles de paginación
            function setupPagination() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                paginationControls.innerHTML = '';

                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.className = 'pagination-button btn btn-outline-primary';
                    if (i === currentPage) {
                        button.classList.add('active');
                    }

                    button.addEventListener('click', () => {
                        currentPage = i;
                        displayRows();
                        setupPagination();
                    });

                    paginationControls.appendChild(button);
                }
            }

            // Eventos
            filterText.addEventListener('input', filterTable);

            // Inicialización
            displayRows();
            setupPagination();
        });

    </script>



    <!-- Estilos Actualizados maneja los estilos del filtrado de usuarios-->

    <style>
        .form-group label {
            width: 150px; /* Ancho fijo para etiquetas */
            text-align: right; /* Alineación del texto */
        }

        .form-group input,
        .form-group select {
            flex-grow: 1; /* Los inputs ocuparán el resto del espacio disponible */
        }

    </style>

    <style>
        <style >
        .pagination-button {
            margin: 0 5px;
            padding: 5px 10px;
            border: 1px solid #ddd;
            background-color: #fff;
            cursor: pointer;
            border-radius: 5px;
        }

        .pagination-button.active {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

        .pagination-button:hover {
            background-color: #0056b3;
            color: #fff;
        }
    </style>


    <!-- Estilos Actualizados maneja los estilos del imput descargar pdf entre otros-->
    <style>



        .d-flex {
            display: flex;
        }

        .separator {
            width: 2px;
            height: 30px;
            background-color: #ddd; /* Color de la línea decorativa */
        }


        .dropdown-container {
            position: relative; /* Asegura que el menú se alinee respecto al contenedor */
        }

            .dropdown-container .dropdown-menu {
                position: absolute;
                top: 100%; /* Despliega justo debajo del botón */
                left: 0;
                display: none;
                list-style: none;
                padding: 10px;
                margin: 0;
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                border-radius: 5px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
                width: 250px;
                opacity: 0;
                transform: translateY(-10px);
                transition: opacity 0.3s ease, transform 0.3s ease;
                z-index: 1000;
            }

                .dropdown-container .dropdown-menu.show {
                    display: block;
                    opacity: 1;
                    transform: translateY(0);
                }
    </style>


    <!-- Script para manejar el menú desplegable -->
    <!-- Script para manejar el menú desplegable -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropdownButton = document.getElementById("dropdownButton");
            const dropdownMenu = document.getElementById("dropdownMenu");

            // Alternar visibilidad y clase de animación
            dropdownButton.addEventListener("click", function (event) {
                event.stopPropagation(); // Evitar propagación
                dropdownMenu.classList.toggle("show");
            });

            // Cerrar el menú si se hace clic fuera
            document.addEventListener("click", function (event) {
                if (!dropdownMenu.contains(event.target)) {
                    dropdownMenu.classList.remove("show");
                }
            });
        });

    </script>






   