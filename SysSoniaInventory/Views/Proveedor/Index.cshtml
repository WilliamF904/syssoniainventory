@model IEnumerable<SysSoniaInventory.Models.ModelProveedor>

@{
    ViewData["Title"] = "Index";
}

<div class="row">
    <!-- Encabezado con el título y botón para crear nuevo proveedor -->
    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h1 class="card-title">Lista de Proveedores</h1>
                @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                {
                    <a asp-action="Create" class="btn btn-outline-primary font-weight-bold ml-2">
                        <i class="fas fa-plus"></i> Nuevo proveedor
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Filtrado de Proveedores -->
    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h1 class="card-title">Filtrado de Proveedores</h1>
                <form>
                    <div class="form-group d-flex align-items-center">
                        <input type="text" id="filterText" class="form-control" placeholder="Filtrar por nombre, descripción, email, etc." style="width: auto;">
                    </div>
                    <div class="form-group d-flex align-items-center">
                        <select id="filterRole" class="form-control" style="width: auto;">
                            <option value="">Todos</option>
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </select>
                    </div>
                    <div class="form-group d-flex align-items-center">
                        <select id="sortOrder" class="form-control" style="width: auto;">
                            <option value="">Sin orden</option>
                            <option value="asc">Ascendente (A-Z)</option>
                            <option value="desc">Descendente (Z-A)</option>
                        </select>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Tabla de Proveedores -->
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-striped" id="providerTable">
                        <thead>
                            <tr>
                                <th>@Html.DisplayNameFor(model => model.Name)</th>
                                <th>@Html.DisplayNameFor(model => model.Description)</th>
                                <th>@Html.DisplayNameFor(model => model.Tel)</th>
                                <th>@Html.DisplayNameFor(model => model.Email)</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Tel)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                    <td>
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning">Editar</a>
                                        }
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info">Detalles</a>
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div id="paginationControls" class="mt-3"></div>
            </div>
        </div>
    </div>

    

<!-- Scripts y estilos heredados -->
<style>
    .form-group label {
        width: 150px;
        text-align: right;
    }

    .form-group input,
    .form-group select {
        flex-grow: 1;
    }

    .d-flex {
        display: flex;
    }

    .separator {
        width: 2px;
        height: 30px;
        background-color: #ddd;
    }

    .dropdown-container {
        position: relative;
    }

        .dropdown-container .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            display: none;
            list-style: none;
            padding: 10px;
            margin: 0;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            width: 250px;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
            z-index: 1000;
        }

            .dropdown-container .dropdown-menu.show {
                display: block;
                opacity: 1;
                transform: translateY(0);
            }
</style>

<script>
          document.addEventListener('DOMContentLoaded', function () {
            const filterText = document.getElementById('filterText');
            const filterRole = document.getElementById('filterRole');
            const sortOrder = document.getElementById('sortOrder');
            const providerTable = document.getElementById('providerTable');
            const rows = Array.from(providerTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr'));
            const paginationControls = document.getElementById('paginationControls');
            const rowsPerPage = 6;
            let currentPage = 1;
            let filteredRows = rows;

            // Filtrar y ordenar filas
            function filterTable() {
                const filterValue = filterText.value.toLowerCase();
                const roleValue = filterRole.value;
                const orderValue = sortOrder.value;

                filteredRows = rows.filter(row => {
                    const cells = Array.from(row.getElementsByTagName('td'));
                    const matchesText = !filterValue || cells.some(cell => cell.textContent.toLowerCase().includes(filterValue));
                    const statusCell = cells[1]?.textContent.trim(); // Ajusta el índice según la columna de estado en tu tabla
                    let matchesRole = true;

                    if (roleValue === "Activo") {
                        matchesRole = statusCell === "Activo";
                    } else if (roleValue === "Inactivo") {
                        matchesRole = statusCell === "Inactivo";
                    }

                    return matchesText && matchesRole;
                });

                if (orderValue) {
                    filteredRows.sort((a, b) => {
                        const nameA = a.getElementsByTagName('td')[0].textContent.toLowerCase();
                        const nameB = b.getElementsByTagName('td')[0].textContent.toLowerCase();
                        return orderValue === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
                    });
                }

                currentPage = 1;
                displayRows();
                setupPagination();
            }

            // Mostrar filas paginadas
            function displayRows() {
                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                rows.forEach(row => (row.style.display = 'none'));
                filteredRows.slice(start, end).forEach(row => (row.style.display = ''));
            }

            // Configurar controles de paginación
            function setupPagination() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                paginationControls.innerHTML = '';

                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.className = 'pagination-button';
                    if (i === currentPage) {
                        button.classList.add('active');
                    }

                    button.addEventListener('click', () => {
                        currentPage = i;
                        displayRows();
                        setupPagination();
                    });

                    paginationControls.appendChild(button);
                }
            }

            // Eventos
            filterText.addEventListener('input', filterTable);
            filterRole.addEventListener('change', filterTable);
            sortOrder.addEventListener('change', filterTable);

            // Inicialización
            displayRows();
            setupPagination();
        });

</script>
