@model SysSoniaInventory.Models.ModelDevolucion

@{
    ViewData["Title"] = "Create";
}


<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="~/assets/vendors/mdi/css/materialdesignicons.min.css">
<link rel="stylesheet" href="~/assets/vendors/css/vendor.bundle.base.css">
<!-- endinject -->
<!-- Plugin css for this page -->
<link rel="stylesheet" href="~/assets/vendors/jvectormap/jquery-jvectormap.css">
<link rel="stylesheet" href="~/assets/vendors/flag-icon-css/css/flag-icon.min.css">
<link rel="stylesheet" href="~/assets/vendors/owl-carousel-2/owl.carousel.min.css">
<link rel="stylesheet" href="~/assets/vendors/owl-carousel-2/owl.theme.default.min.css">

<link rel="stylesheet" href="~/vendor/fontawesome-free/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css">
<!-- End plugin css for this page -->
<!-- inject:css -->
<!-- endinject -->
<!-- Layout styles -->
<link rel="stylesheet" href="~/assets/css/style.css">

<style>
        #ProductSelect {
            height: auto !important; /* Evita que el navegador lo colapse */

            overflow-y: auto; /* Permite desplazamiento si hay demasiados elementos */
        }

        .custom-lg-text {
            font-size: 1rem; /* Ajusta el tamaño de la fuente según lo necesites */
        }

        .custom-select-option {
            padding: 4px 6px; /* Añade espaciado entre las opciones */
            list-style-type: disc; /* Muestra un punto (bullet) como en una lista */
            border-top: 2px solid #495057; /* Línea en la parte superior */
            border-left: none;
            border-right: none;
            border-bottom: none;
        }
        .modal-lgs {
        max-width: 65%; /* Ajusta el porcentaje o píxeles según necesites */
        width: auto;
    }

</style>
<div class="container-fluid">
    <form asp-action="Create" method="post">
        <input type="hidden" asp-for="NameSucursal" id="NameSucursal" value="@ViewBag.NameSucursal" />

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <!-- Columna izquierda -->
            <div class="col-md-4 stretch-card">
                <div class="card dropdown-container">
                    <div class="card-body">
                        <h1 class="display-5 font-weight-bold text-warning">Registrar Devolución</h1>
                        <hr class="linea-warning" />
                        <div class="row d-none">
                            <!-- Opción 1: Ocultar toda la fila -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Date" class="h5 font-weight-bold">Fecha:</label>
                                    <input asp-for="Date" class="form-control font-weight-bold form-control-lg readonly-input"
                                           id="Date" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly hidden /> <!-- Opción 2: Input oculto -->
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Time" class="h5 font-weight-bold">Hora:</label>
                                    <input asp-for="Time" class="form-control font-weight-bold form-control-lg readonly-input"
                                           id="Time" type="time" value="@DateTime.Now.ToString("HH:mm")" readonly hidden />
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="NameUser" class="h5 font-weight-bold">Usuario:</label>
                            <input asp-for="NameUser" class="form-control font-weight-bold form-control-lg readonly-input" id="NameUser" value="@ViewBag.NameUser" readonly />
                        </div>


                   
                        <div class="form-group">
                            <label for="IdFactura" class="h5 font-weight-bold">ID de factura de venta:</label>
                       
                            <input asp-for="IdFactura" class="form-control" type="number"/>
                            <span asp-validation-for="IdFactura" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label for="NameClient" class="h5 font-weight-bold">NameClient:</label>

                            <input asp-for="NameClient" class="form-control" />
                            <span asp-validation-for="NameClient" class="text-danger"></span>
                        </div>
                        <!-- Contenedor oculto para los inputs dinámicos -->
                        <div id="HiddenInputsContainer"></div>

                        <hr class="linea-warning" />
                        <button type="submit" class="btn btn-outline-primary ">Guardar</button>
                        <a asp-action="Index" class="btn btn-outline-danger ">Cancelar</a>
                    </div>
                </div>
            </div>

            <!-- Columna derecha -->
            <div class="col-md-8   stretch-card">
                <div class="card dropdown-container">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="font-weight-bold mb-0">
                                Productos Devueltos:
                            </h4>
                            <button type="button" class="btn btn-outline-warning" data-toggle="modal" data-target="#productModal2">
                                Seleccionar Productos
                            </button>
                        </div>
                        <!-- Botón para abrir el modal -->

                        <hr class="linea-blanca" />
                        <div class="table-responsive">
                            <table class="table table-bordered  table-striped table-hover">
                                <thead class="bg-warning">
                                    <tr>
                                        <th>Producto</th>
                                        <th>Unid.</th>
                                        <th>Precio Unid.</th>
                                        <th>Subtotal</th>
                                        <th>Actu.</th>
                                        <th>Accion</th>
                                    </tr>
                                </thead>

                                <tbody id="ProductTableBody" class="txt-whithe">
                                    <!-- Filas dinámicas -->
                                </tbody>
                                <tfoot>
                                    <tr>

                                        <td colspan="4" class="text-right font-weight-bold txt-whithe">Total General:</td>
                                        <td colspan="2" id="TotalGeneral" class=" txt-whithe">$0.00</td>
                                    </tr>
                                </tfoot>
                            </table>

                        </div>

                    </div>



                </div>
            </div>

        </div>


    </form>
</div>
<!-- Modal -->
<div id="productModal2" class="modal fade " tabindex="-1" aria-labelledby="productModalLabel2" aria-hidden="true">
    <div class="modal-dialog modal-lgs" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="productModalLabel2">Selecciona un producto</h5>
                <button type="button" class="btn btn-primary" id="selectProductBtn" style="visibility: hidden; pointer-events: none;">Seleccionar</button>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="ProductSearch">Buscar por código:</label>
                    <input type="text" id="ProductSearch" class="form-control form-control-lg text-light" placeholder="Ingrese código del producto...">
                </div>

                <div class="form-group">
                    <label for="ProductSelect">Selecciona un producto (Codigo - Precio venta - Nombre):</label>
                    <select id="ProductSelect" class="form-control form-control-lg  custom-lg-text text-light" size="4">

                        <!-- Aquí irá la lista de productos, que puede ser renderizada dinámicamente -->
                        @foreach (var product in ViewBag.Productos)
                        {
                            <option class="custom-select-option" onmouseover="this.style.backgroundColor='#007bff'"
                                    onmouseout="this.style.backgroundColor=''; this.style.color='white'" value="@product.Id" data-name="@product.Name" data-price="@product.SalePrice" data-stock="@product.Stock" data-codigo="@product.Codigo" data-marca="@product.IdMarcanavigation?.Name">
                                @product.Codigo - $@product.SalePrice - @product.Name
                            </option>
                        }
                    </select>

                </div>


            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-dismiss="modal">Cerrar</button>

            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lgs">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-danger text-white rounded-top">
                <h5 class="modal-title" id="productModalLabel">Añadir Producto</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <div class="mb-3">
                        <label class="form-label" id="productDetails" style="font-weight: bold;"></label>
                    </div>
                    <hr class="linea-blanca" />
                    <div class="mb-3 d-flex align-items-center gap-2">
                        <label for="quantityInput" class="form-label  m-0 w-50 ">Cantidad:</label>
                        <input type="number" class="form-control" id="quantityInput" placeholder="Ingrese cantidad" required>

                    </div>
                    <div class="form-text">Stock actual: <span id="maxStock" class="text-muted"></span></div>
                    <div class="mb-3 d-flex align-items-center gap-2">
                        <label for="PriceReembolsoInput" class="form-label  m-0 w-50 ">Dinero devuelto:</label>
                        <input type="number" class="form-control" id="PriceReembolsoInput" placeholder="Ingrese el valor de devolución" required>
                    </div>
                    <!-- Opción de actualizar precio -->
                    <div class="mb-3 d-flex align-items-center gap-2">
                        <label for="updatePriceSelect" class="form-label m-0 w-50 ">¿Añadir al Stock?</label>
                        <select class="form-control border border-danger text-danger bg-transparent w-30"
                                id="updatePriceSelect" required
                                style="transition: background-color 0.3s, color 0.3s;">
                            <option style="background-color: #1e1e1e;" value="false">No añadir</option>
                            <option style="background-color: #1e1e1e;" value="true">Añadir</option>
                        </select>
                    </div>
                </form>
            </div>
            <br />
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" id="cancelProductBtn">
                    <i class="mdi mdi-close"></i> Cancelar
                </button>
                <button type="button" class="btn btn-outline-danger rounded-pill px-4" id="saveProductBtn">
                    <i class="mdi mdi-content-save"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</div>




<script>
    document.addEventListener('DOMContentLoaded', function () {
        const productSearch = document.getElementById("ProductSearch");
        const productSelect = document.getElementById("ProductSelect");
        const productTableBody = document.getElementById('ProductTableBody');
        const totalGeneral = document.getElementById('TotalGeneral');
        const hiddenInputsContainer = document.getElementById('HiddenInputsContainer');
        const quantityInput = document.getElementById('quantityInput');
        const PriceReembolsoInput = document.getElementById('PriceReembolsoInput');
        const maxStockSpan = document.getElementById('maxStock');
        const saveProductBtn = document.getElementById('saveProductBtn');
        const productDetails = document.getElementById('productDetails');
        const productModal = new bootstrap.Modal(document.getElementById('productModal'));
        const productModal2 = new bootstrap.Modal(document.getElementById('productModal2'));
        const cancelProductBtn = document.getElementById('cancelProductBtn');
        let products = [];
        let currentProduct = null;

        productSearch.addEventListener("input", function () {
            const searchText = productSearch.value.toLowerCase();
            for (let option of productSelect.options) {
                const code = option.getAttribute("data-codigo")?.toLowerCase() || "";
                option.hidden = !(option.value === "" || code.includes(searchText));
            }
            productSelect.options[0].hidden = false;
        });

        productSearch.addEventListener("focus", function () {
            productSelect.size = 4;
        });
        productSearch.addEventListener("blur", function () {

        });


        document.getElementById("selectProductBtn").addEventListener("click", function () {
            var selectedOption = productSelect.options[productSelect.selectedIndex];
            if (selectedOption.value) {
                var productName = selectedOption.getAttribute("data-name");
                var productPrice = selectedOption.getAttribute("data-price");
                var productStock = selectedOption.getAttribute("data-stock");
                productModal2.hide();
            productModal.show();
            } else {
                alert("Por favor, selecciona un producto.");
            }

        });

        productSelect.addEventListener('change', function () {
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            const productId = selectedOption.value;
            const productName = selectedOption.getAttribute('data-name');
            const productPrice = parseFloat(selectedOption.getAttribute('data-price'));
            const productStock = parseInt(selectedOption.getAttribute('data-stock'));
            const productCodigo = selectedOption.getAttribute('data-codigo');
            const productMarca = selectedOption.getAttribute('data-marca');

            if (products.some(p => p.id === productId)) {
                alert("Este producto ya está agregado.");
                return;
            }

            currentProduct = { id: productId, name: productName, price: productPrice, stock: productStock, codigo: productCodigo, marca: productMarca };
            productDetails.textContent = `${currentProduct.name} (Código: ${currentProduct.codigo}) - Marca: ${currentProduct.marca}`;
            maxStockSpan.textContent = productStock;
            quantityInput.value = 1;
            PriceReembolsoInput.value = productPrice;
            productModal2.hide();
            productModal.show();
        });

        cancelProductBtn.addEventListener('click', function () {
            productSelect.selectedIndex = 0;
            productModal.hide();
        });

        saveProductBtn.addEventListener('click', function () {
            const quantity = parseInt(quantityInput.value, 10);
            const PriceReembolso = parseFloat(PriceReembolsoInput.value);
            const StockD = document.getElementById('updatePriceSelect').value === 'true';
            if (isNaN(quantity) || quantity <= 0 || quantity > currentProduct.stock) {
                alert("Cantidad inválida. Verifique los límites.");
                return;
            }
            if (isNaN(PriceReembolso) || PriceReembolso <= 0) {
                alert("Precio de compra inválido.");
                return;
            }

            const subtotal = PriceReembolso * quantity;
            const product = { id: currentProduct.id, codigo: currentProduct.codigo, name: currentProduct.name, quantity, price: PriceReembolso, subtotal, StockD };
            products.push(product);

            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="txt-whithe" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 150px;" title="${product.name}">${product.name}</td>
                <td class="txt-whithe">${quantity}</td>
                    <td class="txt-whithe">$${PriceReembolso.toFixed(2)}</td>
                <td class="txt-whithe">$${subtotal.toFixed(2)}</td>
                    <td>${StockD ? '<span class="text-success">Sí</span>' : '<span class="text-danger">No</span>'}</td>
                <td><button class="btn btn-danger btn-sm" onclick="removeProduct('${product.id}', this)"> X </button></td>
            `;
            productTableBody.appendChild(row);

            updateHiddenInputs();
            updateTotal();
            productSelect.selectedIndex = 0;
            productModal2.hide();
            productModal.hide();
        });

        function updateHiddenInputs() {
            hiddenInputsContainer.innerHTML = '';
            products.forEach((product, index) => {
                const baseName = `detalles[${index}]`;
                hiddenInputsContainer.innerHTML += `
                    <input type="hidden" name="${baseName}.IdProduct" value="${product.id}" />
                    <input type="hidden" name="${baseName}.CodigoProducto" value="${product.codigo}" />
                    <input type="hidden" name="${baseName}.CantidadProduct" value="${product.quantity}" />
                        <input type="hidden" name="${baseName}.PriceReembolso" value="${product.price}" />
                        <input type="hidden" name="${baseName}.PriceTotalReembolso" value="${product.subtotal}" />
                    <input type="hidden" name="${baseName}.NameProduct" value="${product.name}" />
                                <input type="hidden" name="${baseName}.StockD" value="${product.StockD}" />
                `;
            });
        }

        function updateTotal() {
            const total = products.reduce((sum, product) => sum + product.subtotal, 0);
            totalGeneral.textContent = `$${total.toFixed(2)}`;
        }

        window.removeProduct = function (productId, button) {
            products = products.filter(p => p.id !== productId);
            button.parentElement.parentElement.remove();
            updateHiddenInputs();
            updateTotal();
        };
    });

    document.getElementById("updatePriceSelect").addEventListener("change", function () {
        if (this.value === "false") {
            this.classList.remove("border-success", "text-success");
            this.classList.add("border-danger", "text-danger");
        } else {
            this.classList.remove("border-danger", "text-danger");
            this.classList.add("border-success", "text-success");
        }
    });

    document.getElementById("updatePriceSelect").addEventListener("mouseover", function () {
        if (this.value === "false") {
            this.style.backgroundColor = "rgba(220, 53, 69, 0.2)"; /* Rojo transparente */
        } else {
            this.style.backgroundColor = "rgba(40, 167, 69, 0.2)"; /* Verde transparente */
        }
    });

    document.getElementById("updatePriceSelect").addEventListener("mouseout", function () {
        this.style.backgroundColor = "transparent"; /* Vuelve a ser transparente */
    });

</script>