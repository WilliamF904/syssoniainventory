@model IEnumerable<SysSoniaInventory.Models.ModelUser>

@{
    ViewData["Title"] = "Index";
}


<div class="row">


    <div class="col-lg-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h1 class="card-title">Lista de Usuarios</h1>
                <div class="d-flex align-items-center justify-content-start">
                    @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                    {
                        <!-- Botón Nuevo Usuario -->
                        <a asp-action="Create" class="btn btn-outline-primary font-weight-bold ml-2">
                            <i class="fas fa-plus"></i> Nuevo usuario
                        </a>


                        <!-- Línea decorativa -->
                        <div class="separator mx-3"></div>
                    }
                    @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 5"))
                    {
                        <!-- Contenedor del Botón Descargar PDF -->
                        <div class="dropdown-container">
                            <!-- Botón principal para abrir el menú -->
                            <button id="dropdownButton" class="dropdown-button btn btn-outline-secondary">
                                <i class="mdi mdi-download"></i> Descargar PDF
                            </button>

                            <!-- Menú desplegable -->
                            <ul id="dropdownMenu" class="dropdown-menu">
                                <li>
                                    <a asp-action="GeneratePdf" asp-route-active="true">
                                        <i class="mdi mdi-download"></i> Descargar Usuarios Activos
                                    </a>
                                </li>
                                <li>
                                    <a asp-action="GeneratePdf" asp-route-active="false">
                                        <i class="mdi mdi-download"></i> Descargar Usuarios Inactivos
                                    </a>
                                </li>
                                <li>
                                    <a asp-action="GeneratePdf">
                                        <i class="mdi mdi-download"></i> Descargar Todos los Usuarios
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>




    <div class="col-lg-6 grid-margin stretch-card">
        <!-- Contenedor específico para el dropdown -->
        <div class="card dropdown-container">
            <div class="card-body">
                <h1 class="card-title">Filtrado de usuarios</h1>

                <!-- Campos de filtrado -->
                <form>
                    <div class="form-group d-flex align-items-center" style="width: auto;>
                        <label for="filterText" class="mr-2"></label>
                        <input type="text" id="filterText" class="form-control" placeholder="Filtrar por nombre, apellido, email, etc." style="width: auto;">
                    </div>

                    <div class="form-group d-flex align-items-center">

                        <select id="filterRole" class="form-control" style="width: auto;">
                            <option value="">Todos</option>
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </select>
                    </div>

                    <div class="form-group d-flex align-items-center">

                        <select id="sortOrder" class="form-control" style="width: auto;">
                            <option value="">Sin orden</option>
                            <option value="asc">Ascendente (A-Z)</option>
                            <option value="desc">Descendente (Z-A)</option>
                        </select>
                    </div>
                </form>
            </div>

        </div>
    </div>

    <br><br>


    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Tabla de usuarios</h4>


                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-striped" id="userTable">
                        <thead>
                            <tr>
                                <th scope="col">@Html.DisplayNameFor(model => model.Name)</th>
                                <th scope="col">@Html.DisplayNameFor(model => model.LastName)</th>
                                <th scope="col">@Html.DisplayNameFor(model => model.Email)</th>
                                <th scope="col">@Html.DisplayNameFor(model => model.Estatus)</th>
                                <th scope="col">Acciones</th>
                            </tr>
                        </thead>
                        <tbody class="txt-whithe">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                    <td> @(item.Estatus == 1 ? "Activo" : "Inactivo")</td>

                                    <td>
                                        @if (User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-success">Modificar</a>

                                        }
                                        @if (User.HasClaim("AccessTipe", "Nivel 4") || User.HasClaim("AccessTipe", "Nivel 3"))
                                        {
                                            <a asp-action="EditUser" asp-route-id="@item.Id" class="btn btn-outline-warning">Editar</a>

                                        }
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info">Detalles</a>
                                        @if (User.HasClaim("AccessTipe", "Nivel 5"))
                                        {
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div id="paginationControls" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>






<!-- Estilos Actualizados maneja los estilos del filtrado de usuarios-->

<style>
    .form-group label {
        width: 150px; /* Ancho fijo para etiquetas */
        text-align: right; /* Alineación del texto */
    }

    .form-group input,
    .form-group select {
        flex-grow: 1; /* Los inputs ocuparán el resto del espacio disponible */
    }

</style>

<!-- Estilos Actualizados maneja los estilos del imput descargar pdf entre otros-->
<style>



    .d-flex {
        display: flex;
    }

    .separator {
        width: 2px;
        height: 30px;
        background-color: #ddd; /* Color de la línea decorativa */
    }


    .dropdown-container {
        position: relative; /* Asegura que el menú se alinee respecto al contenedor */
    }

        .dropdown-container .dropdown-menu {
            position: absolute;
            top: 100%; /* Despliega justo debajo del botón */
            left: 0;
            display: none;
            list-style: none;
            padding: 10px;
            margin: 0;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            width: 250px;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
            z-index: 1000;
        }

            .dropdown-container .dropdown-menu.show {
                display: block;
                opacity: 1;
                transform: translateY(0);
            }
</style>


<!-- Script para manejar el menú desplegable -->
<!-- Script para manejar el menú desplegable -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dropdownButton = document.getElementById("dropdownButton");
        const dropdownMenu = document.getElementById("dropdownMenu");

        // Alternar visibilidad y clase de animación
        dropdownButton.addEventListener("click", function (event) {
            event.stopPropagation(); // Evitar propagación
            dropdownMenu.classList.toggle("show");
        });

        // Cerrar el menú si se hace clic fuera
        document.addEventListener("click", function (event) {
            if (!dropdownMenu.contains(event.target)) {
                dropdownMenu.classList.remove("show");
            }
        });
    });

</script>
<!-- Script para el filtrado de usuarios -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterText = document.getElementById('filterText');
        const filterRole = document.getElementById('filterRole');
        const sortOrder = document.getElementById('sortOrder');
        const userTable = document.getElementById('userTable');
        const rows = Array.from(userTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr'));
        const paginationControls = document.getElementById('paginationControls');
        const rowsPerPage = 6;
        let currentPage = 1; // Página actual
        let filteredRows = rows; // Filas actualmente filtradas

        // Filtrar y ordenar filas
        function filterTable() {
            const filterValue = filterText.value.toLowerCase(); // Texto de búsqueda
            const roleValue = filterRole.value;                // Filtro de estatus
            const orderValue = sortOrder.value;                // Ordenar alfabéticamente

            // Aplicar filtrado por texto
            filteredRows = rows.filter(row => {
                const cells = Array.from(row.getElementsByTagName('td'));
                const matchesText = !filterValue || cells.some(cell => cell.textContent.toLowerCase().includes(filterValue));

                // Modificación aquí: Filtrar por activo/inactivo correctamente
                const statusCell = row.getElementsByTagName('td')[4].textContent.trim(); // Columna de estatus
                let matchesRole = true; // Valor predeterminado para incluir todos
                if (roleValue === "Activo") {
                    matchesRole = statusCell === "1";
                } else if (roleValue === "Inactivo") {
                    matchesRole = statusCell === "0";
                }

                return matchesText && matchesRole;
            });

            // Aplicar ordenamiento
            if (orderValue) {
                filteredRows.sort((a, b) => {
                    const nameA = a.getElementsByTagName('td')[0].textContent.toLowerCase();
                    const nameB = b.getElementsByTagName('td')[0].textContent.toLowerCase();
                    return orderValue === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
                });
            }

            // Reiniciar a la primera página
            currentPage = 1;
            displayRows();
            setupPagination();
        }

        // Mostrar filas paginadas
        function displayRows() {
            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            // Ocultar todas las filas y mostrar solo las de la página actual
            rows.forEach(row => (row.style.display = 'none'));
            filteredRows.slice(start, end).forEach(row => (row.style.display = ''));
        }

        // Configurar controles de paginación
        function setupPagination() {
            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
            paginationControls.innerHTML = ''; // Limpiar controles de paginación

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.className = 'pagination-button';
                if (i === currentPage) {
                    button.classList.add('active');
                }

                button.addEventListener('click', () => {
                    currentPage = i;
                    displayRows();
                    setupPagination();
                });

                paginationControls.appendChild(button);
            }
        }

        // Vincular eventos de filtrado
        filterText.addEventListener('input', filterTable);
        filterRole.addEventListener('change', filterTable);
        sortOrder.addEventListener('change', filterTable);

        // Inicializar tabla
        displayRows();
        setupPagination();
    });
</script>






<script>
    // Implementar barra de búsqueda
    const searchBar = document.getElementById('searchBar');
    const userTable = document.getElementById('userTable');
    const rows = Array.from(userTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr'));

    searchBar.addEventListener('keyup', function () {
        const filter = searchBar.value.toLowerCase();
        rows.forEach(row => {
            const cells = row.getElementsByTagName('td');
            let match = Array.from(cells).some(cell => cell.textContent.toLowerCase().includes(filter));
            row.style.display = match ? '' : 'none';
        });
    });

    // Implementar paginación
    const rowsPerPage = 6;
    let currentPage = 1;

    function displayRows() {
        const start = (currentPage - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        rows.forEach((row, index) => {
            row.style.display = index >= start && index < end ? '' : 'none';
        });
    }

    function setupPagination() {
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        const paginationControls = document.getElementById('paginationControls');
        paginationControls.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement('button');
            button.textContent = i;
            button.className = 'pagination-button';
            if (i === currentPage) {
                button.classList.add('active');
            }

            button.addEventListener('click', () => {
                currentPage = i;
                displayRows();
                setupPagination();
            });

            paginationControls.appendChild(button);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        displayRows();
        setupPagination();
    });
</script>
